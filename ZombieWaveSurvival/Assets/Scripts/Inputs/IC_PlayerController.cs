//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/IC_PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IC_PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IC_PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IC_PlayerController"",
    ""maps"": [
        {
            ""name"": ""BasePlayer"",
            ""id"": ""ddeb1648-ec10-4f4a-8c4e-f1fcc283dd56"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseAKeyboard"",
            ""bindingGroup"": ""MouseAKeyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        }
    ]
}");
        // BasePlayer
        m_BasePlayer = asset.FindActionMap("BasePlayer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasePlayer
    private readonly InputActionMap m_BasePlayer;
    private List<IBasePlayerActions> m_BasePlayerActionsCallbackInterfaces = new List<IBasePlayerActions>();
    public struct BasePlayerActions
    {
        private @IC_PlayerController m_Wrapper;
        public BasePlayerActions(@IC_PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_BasePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasePlayerActions set) { return set.Get(); }
        public void AddCallbacks(IBasePlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_BasePlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasePlayerActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IBasePlayerActions instance)
        {
        }

        public void RemoveCallbacks(IBasePlayerActions instance)
        {
            if (m_Wrapper.m_BasePlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasePlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_BasePlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasePlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasePlayerActions @BasePlayer => new BasePlayerActions(this);
    private int m_MouseAKeyboardSchemeIndex = -1;
    public InputControlScheme MouseAKeyboardScheme
    {
        get
        {
            if (m_MouseAKeyboardSchemeIndex == -1) m_MouseAKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseAKeyboard");
            return asset.controlSchemes[m_MouseAKeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IBasePlayerActions
    {
    }
}
